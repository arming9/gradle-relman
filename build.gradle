if(System.env.containsKey('TRAVIS_TAG')){
	version = System.env.TRAVIS_TAG
} else {
	version = 'preliminary'
}

group = 'com.github.gradle-relman'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'

dependencies {
	compile gradleApi()
}

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

// prepare the distributables
jar {
 	from('.') {
    	include "license.txt"
    	into 'META-INF'
  	}
  	manifest {
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version
        )
    }
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

//signing {
//	sign configurations.archives
//}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//				authentication(userName: ossrhUsername, password: ossrhPassword)
//			}
//
//			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//				authentication(userName: ossrhUsername, password: ossrhPassword)
//			}

			pom.project {
				name 'Gradle Release Manager Plugin'
				packaging 'jar'
				// optionally artifactId can be defined here
				description 'A gradle plugin used to define the version numbers of dependencies in a single project, then reuse that version numbers in all other projects for the dependencies.'
				url 'https://github.com/arming9/gradle-relman'

				scm {
					connection 'scm:git:https://github.com/arming9/gradle-relman/'
					developerConnection 'scm:git:https://github.com/arming9/gradle-relman/'
					url 'https://github.com/arming9/gradle-relman/'
				}

				licenses {
					license {
						name 'MIT License'
						distribution 'repo'
						url 'https://github.com/arming9/gradle-relman/license.txt'
					}
				}

				developers {
					developer {
						id 'arming9'
						name 'Armin Groll'
						email 'arming9@gmx.de'
					}
				}
			}
		}
	}
}

// setup eclipse so that we have the classpath and gradle sources available
eclipse.classpath.downloadSources = true

// this is a workaround from http://forums.gradle.org/gradle/topics/eclipse_plugin_doesnt_attach_source_for_the_gradleapi_dependency
import org.gradle.plugins.ide.eclipse.model.*
eclipse {
    classpath {
        file {
            whenMerged {Classpath cp ->
                String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
                String gradleSrc = "${gradleHome}/src"
                cp.entries.each {ClasspathEntry entry ->
                    if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
                        entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSrc)
                    }
                }
            }
        }
    }
}
// end workaround

// the gradle wrapper generator task in case you need it
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

